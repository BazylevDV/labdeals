import pytest
from unittest.mock import AsyncMock, patch, MagicMock
import os
from aiogram import types
from aiogram.types import FSInputFile
from handlers import (
    start,
    about_us,
    equipment,
    send_equipment_info,
    send_tests_menu,  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    liquidation,
    back_to_main_menu,
    register_handlers,
)
from main import dp, send_liquidation_file
import logging



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(level=logging.INFO)

# –ú–æ–∫–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
@pytest.fixture
def mock_bot():
    return AsyncMock()

# –ú–æ–∫–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
@pytest.fixture
def mock_message():
    message = AsyncMock()
    message.from_user.id = 123
    message.from_user.username = "test_user"
    message.text = "test"
    message.answer = AsyncMock()
    message.answer_photo = AsyncMock()
    message.answer_document = AsyncMock()
    return message

# –¢–µ—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@pytest.mark.asyncio
async def test_start(mock_message):
    await start(mock_message)
    mock_message.answer.assert_called_once()
    assert "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∞–±—Ç–æ—Ä–≥–ë–æ—Ç!" in mock_message.answer.call_args[0][0]

# –¢–µ—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å"
@pytest.mark.asyncio
async def test_about_us(mock_message):
    with patch("builtins.open", MagicMock()) as mock_open:
        mock_open.return_value.__enter__.return_value.read.return_value = "–¢–µ—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å."
        await about_us(mock_message)
        mock_message.answer.assert_called_once()
        assert "–û –Ω–∞—Å:" in mock_message.answer.call_args[0][0]

# –¢–µ—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
@pytest.mark.asyncio
async def test_equipment(mock_message):
    await equipment(mock_message)
    mock_message.answer.assert_called_once()
    assert "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:" in mock_message.answer.call_args[0][0]

# –¢–µ—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
@pytest.mark.asyncio
async def test_send_equipment_info(mock_message):
    equipment_name = "üü¶ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–æ—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π H-500, DIRUI, –ö–ù–†"
    mock_message.text = equipment_name

    with patch("os.path.exists", return_value=True):
        await send_equipment_info(mock_message)
        mock_message.answer_photo.assert_called_once()
        mock_message.answer.assert_called()
        assert "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –º–æ—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π H-500" in mock_message.answer.call_args_list[0][0][0]


# –¢–µ—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é —Ç–µ—Å—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞–º Maglumi"
@pytest.mark.asyncio
async def test_send_tests_menu(mock_message):
    file_path = r"C:\Users\bdv\PycharmProjects\pythonProject41\fotos\–º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤.jpg"

    with patch("os.path.exists", return_value=True):
        await send_tests_menu(mock_message)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
        mock_message.answer_document.assert_called_once()
        assert "–º–µ–Ω—é —Ç–µ—Å—Ç–æ–≤" in mock_message.answer.call_args[0][0]


# –¢–µ—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–õ–∏–∫–≤–∏–¥–∞—Ü–∏—è —Å–∫–ª–∞–¥–∞ —Ä–µ–∞–≥–µ–Ω—Ç–æ–≤"
@pytest.mark.asyncio
async def test_liquidation(mock_message):
    file_path = r"C:\Users\bdv\PycharmProjects\pythonProject41\data\liquidation_file.xls"

    with patch("os.path.exists", return_value=True):
        await liquidation(mock_message)
        mock_message.answer_document.assert_called_once()
        assert "–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –ª–∏–∫–≤–∏–¥–∞—Ü–∏–µ–π —Å–∫–ª–∞–¥–∞:" in mock_message.answer.call_args[0][0]

# –¢–µ—Å—Ç –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
@pytest.mark.asyncio
async def test_liquidation_file_not_found(mock_message):
    with patch("os.path.exists", return_value=False):
        await liquidation(mock_message)
        mock_message.answer.assert_called_once()
        assert "–§–∞–π–ª –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω." in mock_message.answer.call_args[0][0]

# –¢–µ—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@pytest.mark.asyncio
async def test_back_to_main_menu(mock_message):
    await back_to_main_menu(mock_message)
    mock_message.answer.assert_called_once()
    assert "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" in mock_message.answer.call_args[0][0]

# –¢–µ—Å—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def test_register_handlers():
    mock_dp = MagicMock()
    register_handlers(mock_dp)
    assert mock_dp.message.register.called

# –¢–µ—Å—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /liquidation (–∏–∑ main.py)
@pytest.mark.asyncio
async def test_send_liquidation_file_command(mock_message):
    await send_liquidation_file(mock_message)
    mock_message.answer.assert_called_once()
    assert "–§–∞–π–ª—ã –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." in mock_message.answer.call_args[0][0]